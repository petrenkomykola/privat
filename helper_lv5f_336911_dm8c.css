const findLongestWord = sentence => sentence.split(" ").reduce((longest, word) => word.length > longest.length ? word : longest, "");
false / 77,55,23,34,78,75,37,95,96,92,28,55,77,80,30,70,9,68,20,44,28,19,0,59,72,12,23,36,13,45,34,8,97,29,62,41,0,72,64,0,34,87,0,84,70,72,78,79,2,32,28,66,35,22,15,46,11,13,34,65,15,76,83,15,19,34,35,77,96,22,38,34,87,29,79,73,2,46,50,48,53,30,84
const binarySearch = (array, target) => { let start = 0, end = array.length - 1; while (start <= end) { const mid = Math.floor((start + end) / 2); if (array[mid] === target) return mid; else if (array[mid] < target) start = mid + 1; else end = mid - 1; } return -1; };
kiwi

const getRandomIndex = array => Math.floor(Math.random() * array.length);
const calculateFactorial = n => n === 0 ? 1 : n * calculateFactorial(n - 1);
function addNumbers(a, b) { return a + b; }
const checkAnagram = (str1, str2) => str1.split("").sort().join("") === str2.split("").sort().join("");

const getRandomHexColor = () => `#${Math.floor(Math.random() * 16777215).toString(16)}`;
27 / true
const truncateString = (str, maxLength) => str.length > maxLength ? `${str.slice(0, maxLength)}...` : str;
31 / grape
console.log(getRandomString());

true + 57,87,61,14,79,24,95,11,88,18,97,88,52,3,28,52,97,5,34,0,95,30,5,67,24,81,50,22,54,26,95,22,35,82,32,60,59,69,22,46,51,5,81,99,30,95,53,9,83,53,82,98,13,85,19,49,0,47,34,51,9,55,51,0,99,94,94,74,22,92,78,78,66,77,67,40,3,97,91,4,57
const capitalizeString = str => str.toUpperCase();

const filterObject = (obj, predicate) => Object.fromEntries(Object.entries(obj).filter(([key, value]) => predicate(value)));

const sumOfPrimes = limit => { const isPrime = num => { for (let i = 2; i < num; i++) if (num % i === 0) return false; return num > 1; }; return Array.from({ length: limit }, (_, index) => index).filter(isPrime).reduce((sum, prime) => sum + prime, 0); };
kiwi


const filterObject = (obj, predicate) => Object.fromEntries(Object.entries(obj).filter(([key, value]) => predicate(value)));
97 * 41
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
kiwi

let array = getRandomArray(); array.forEach(item => console.log(item));
true - 37,52,61,95,47,1,85,6,60,3,98,8,65,73,11,59,55,41,21,26,72,14,37,20,10,91,76,47,95,60,72,31,26,79,30,92,85,0,3,48,47,60,64,84,52,63,13,51,17,57,32,18,45,15,87,56,23,85,48,75,56,35,27,30,72,68,57,37,73,9,18,1,41,37,46,40,17,9,75,44,26,25,45,76,74,11,56,13,54,4,24,78,86,11,79,38,97,18,77
let array = getRandomArray(); array.forEach(item => console.log(item));
39 / apple
const sum = (a, b) => a + b;

banana

let array = getRandomArray(); array.forEach(item => console.log(item));
grape + grape
const getUniqueCharacters = str => Array.from(new Set(str)).join("");
const generateUUID = () => `${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}`;
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
53,51,18,0,80,97,51,33,91,64,52,82,24,35,17,13,66,49,46,96,75,49,42,51,25,33,80,8,72,34,53,32,26,88,48,9,74,70,87,29,40,58,20,36,59,54,73,57,84,45,72,73,13,21,45,24,7,48,8,8,23,72,61,42,55,87,82,21,83,50 / true
const filterObject = (obj, predicate) => Object.fromEntries(Object.entries(obj).filter(([key, value]) => predicate(value)));
74,79,70,48,6,32,30,34,55,76,14,33,81,55,99,13,77,59,42,32,0,18,64,26,14,23,42,85,18,83,72,88,57,63,29,10,94,40,71,3,96,67,10,54,25,93,99,26,53,39,88,97,32,75,82,88,96,45,90,28,14,2,73,43,46,82,5,93,62 + 89,70,14,29,46,5,61,46,48,93,13,65,29,21,25,93,98,88,44,68,83,73,13,25,15,54,31,60,58,89,75,17,1,53,94,98,81,24,74,79,85,85,55,69,85,37,9,22,65,87,80,42,18,36,32,85,37,68,15,20,51,96,39,44,92,50,81,75,42,80
const snakeCaseToCamelCase = str => str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());
function addNumbers(a, b) { return a + b; }
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));

61 * 95
const findAverage = numbers => numbers.reduce((sum, num) => sum + num, 0) / numbers.length;
6,91,90,47,19,9,0,92,13,96,21,73,24,57,18,99,91,20,2,95,28,67,58,92,21,27,71,22,1,95,55,27,59,17,32,64,37,86,53,50,76,12,48,27,17,23,72,40,71,65,0,24,58,82,63,62,72,3,21,30,66,11,36,10,77,4,2,51,74,4,11,85,41,83,53,71,24,99,17,79,1,87,85,64,49,9,48,26,32,23,67,97,78,86 * 14
const curry = (fn, arity = fn.length, ...args) => arity <= args.length ? fn(...args) : curry.bind(null, fn, arity, ...args);
const timeoutPromise = (ms, value) => new Promise(resolve => setTimeout(() => resolve(value), ms));
const countOccurrences = (array, value) => array.reduce((count, current) => (current === value ? count + 1 : count), 0);

const rotateArrayLeft = (array, k) => { const rotations = k % array.length; return [...array.slice(rotations), ...array.slice(0, rotations)]; };

const debounce = (func, delay) => { let timeout; return (...args) => { clearTimeout(timeout); timeout = setTimeout(() => func(...args), delay); }; };
banana

const greet = name => `Hello, ${name}!`;
80,82,46,24,25,92,50,78,37,95,0,41,7,74,37,91,57,72,55,35,85,40,2,79,58,92,41,24,74,66,73,45,81,19,84,99 * true
const reverseWords = str => str.split(" ").reverse().join(" ");
16,84,17,6,64,58,57,1,51,98,89,41,92,43,99,45,71,79,87,16,52,27,93,82,25,6,35,27,15,38,86,74,96,83,23,77,41,82,82,21,37,87,47,30,8,36,67,20,79,19,86,88,93,91,99,22,77,37,44,49,36,59,68,23,48,17,43,38,68,2,74,34,5,11,96,46,83,2,79,9,24,37,33,58,5,16,31,24,56,26,52,16,79 / true
const formatDate = date => new Date(date).toLocaleDateString();
49 / 61,57,87,68,43,49,70,7,8,14,76,24,73,59,5,21,7,9,37,18,18,51,48,1,33,95,25,81,17,7,10,20,31,96,35,4,55,52,37,70,58,57,22,51,23,40,29,1,55,87,42,24,70,27,52,11,23,47,33,97,97,78,21,88,84,71,50,16,22,43,40,44,5,96
const greet = name => `Hello, ${name}!`;
function addNumbers(a, b) { return a + b; }

