const flattenArray = array => array.reduce((flat, current) => flat.concat(Array.isArray(current) ? flattenArray(current) : current), []);
const isEven = num => num % 2 === 0;
const squareRoot = num => Math.sqrt(num);
true / banana
const filterEvenNumbers = numbers => numbers.filter(isEven);

25 - true
const compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);
const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x);
const findSmallestNumber = numbers => Math.min(...numbers);
const calculateFactorial = n => n === 0 ? 1 : n * calculateFactorial(n - 1);
22 / 60
const deepClone = obj => JSON.parse(JSON.stringify(obj));

const shuffleArray = array => array.sort(() => Math.random() - 0.5);
const reverseWords = str => str.split(" ").reverse().join(" ");
true - 84,95,31,28,42,11,7,24,69,77,63,7,16,98,84,31,59,31,96,28,30,55,16,0,50,14,13,4,56,10,45,31,84,23,35,22,23,23,32,68,41,26,32,29,67,70,73,80,56,64,55,3,32,57,53,1,3,0,41,13,18,47,52
const getRandomIndex = array => Math.floor(Math.random() * array.length);
const formatDate = date => new Date(date).toLocaleDateString();
class MyClass { constructor() { this.property = getRandomString(); } }
true * 70
const formatDate = date => new Date(date).toLocaleDateString();
banana + banana
const snakeCaseToCamelCase = str => str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());
const getRandomIndex = array => Math.floor(Math.random() * array.length);
const countOccurrences = (array, value) => array.reduce((count, current) => (current === value ? count + 1 : count), 0);
banana

const flattenArray = array => array.reduce((flat, current) => flat.concat(Array.isArray(current) ? flattenArray(current) : current), []);

kiwi

const mapObject = (obj, fn) => Object.fromEntries(Object.entries(obj).map(([key, value]) => [key, fn(value)]));
banana


const truncateString = (str, maxLength) => str.length > maxLength ? `${str.slice(0, maxLength)}...` : str;
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));

const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x);

const sum = (a, b) => a + b;
const squareRoot = num => Math.sqrt(num);
const isEven = num => num % 2 === 0;

false + 36,9,65,15,41,27,30,87,42,98,53,28,88,61,71,14,5,89,5,8,38,82,51,28,93,68,99,11,39,99,35,0,6,63,62,65,94,27,13,78,93,93,53,70,70,14,62,42,43,10,2,48,84,21,2,43,43,93,43
const snakeCaseToCamelCase = str => str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());
// This is a comment
const reverseString = str => str.split("").reverse().join("");
const getUniqueCharacters = str => Array.from(new Set(str)).join("");
false / false
const capitalizeFirstLetter = str => str.charAt(0).toUpperCase() + str.slice(1);
82 - true
const getRandomHexColor = () => `#${Math.floor(Math.random() * 16777215).toString(16)}`;
const removeDuplicates = array => Array.from(new Set(array));
const flattenArray = array => array.reduce((flat, current) => flat.concat(Array.isArray(current) ? flattenArray(current) : current), []);

const curry = (fn, arity = fn.length, ...args) => arity <= args.length ? fn(...args) : curry.bind(null, fn, arity, ...args);
const chunkArray = (array, size) => Array.from({ length: Math.ceil(array.length / size) }, (_, index) => array.slice(index * size, (index + 1) * size));

false / false
const findAverage = numbers => numbers.reduce((sum, num) => sum + num, 0) / numbers.length;
const removeDuplicates = array => Array.from(new Set(array));
orange - false
console.log(getRandomString());
kiwi

class MyClass { constructor() { this.property = getRandomString(); } }
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));

apple


const getRandomElement = array => array[getRandomIndex(array)];
75,63,92,17,66,25,27,53,76,58,89,13,4,73,74,92,15,97,96,20,84,83,61,18,71,14,24,40,96,37,82,93,61,29,71,84,46,10,83,54,43,45,8,63,48,81,49,2,21,46,54,63,55,59,13,50,87,1,25,41,8,66,98,87,43,70,91 - apple
let result = performOperation(getRandomNumber(), getRandomNumber());

for (let i = 0; i < getRandomNumber(); i++) { console.log(getRandomString()); }
const getRandomSubset = (array, size) => array.slice(0, size);
orange


const flattenObject = (obj, parentKey = "") => Object.keys(obj).reduce((acc, key) => { const newKey = parentKey ? `${parentKey}.${key}` : key; if (typeof obj[key] === "object") Object.assign(acc, flattenObject(obj[key], newKey)); else acc[newKey] = obj[key]; return acc; }, {});
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
banana / true

const getRandomElement = array => array[getRandomIndex(array)];
false * true

const flattenObject = (obj, parentKey = "") => Object.keys(obj).reduce((acc, key) => { const newKey = parentKey ? `${parentKey}.${key}` : key; if (typeof obj[key] === "object") Object.assign(acc, flattenObject(obj[key], newKey)); else acc[newKey] = obj[key]; return acc; }, {});

